{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["UserController","req","res","User","findOne","username","body","user","Authenticate","VerifyPassword","password","payload","_id","name","email","token","SignToken","status","send","json","error","HashPassword","password_digest","save","message","split","AuthService"],"mappings":"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","sourcesContent":["import { User } from '../database'\nimport AuthService from '../auth'\n\nclass UserController {\n  constructor() {\n    this.Authenticate = new AuthService()\n  }\n  loginUser = async (req, res) => {\n    try {\n      const user = await User.findOne({ username: req.body.username })\n      if (await this.Authenticate.VerifyPassword(user, req.body.password)) {\n        const payload = {\n          _id: user._id,\n          name: user.name,\n          email: user.email\n        }\n        const token = this.Authenticate.SignToken(payload)\n        res.status(200).send({ payload, token })\n      } else {\n        res.status(401).json({ error: 'Token Invalid' })\n      }\n    } catch (error) {\n      res.status(401).json({ error: 'Token Invalid' })\n    }\n  }\n\n  registerUser = async (req, res) => {\n    try {\n      const { name, email, username, password } = req.body\n      const password_digest = await this.Authenticate.HashPassword(\n        password,\n        res\n      )\n\n      const user = new User({\n        name,\n        username,\n        email,\n        password_digest\n      })\n\n      const payload = {\n        _id: user._id,\n        name: user.name,\n        username: user.username\n      }\n      const token = this.Authenticate.SignToken(payload)\n      if (token) {\n        await user.save()\n        res.json({ payload, token })\n      }\n    } catch (error) {\n      res.status(500).json({ error: error.message.split(':')[0] })\n    }\n  }\n}\n\nexport { UserController }\n"],"file":"UserController.js"}