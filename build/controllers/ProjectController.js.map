{"version":3,"sources":["../../src/controllers/ProjectController.js"],"names":["ProjectController","req","res","Project","find","populate","exec","err","data","status","json","error","send","message","released","query","project","findById","params","project_id","images","Helpers","checkGif","locals","files","checkTags","body","tags","Tag","save","length","projectBody","JSON","parse","console","log","_id","updateOne","next","image","image_url","split","filename","projectname","title","remove","HelperService"],"mappings":"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","sourcesContent":["import { Project, Tag } from '../database'\nimport HelperService from './helpers'\nclass ProjectController {\n  constructor() {\n    this.Helpers = new HelperService()\n  }\n\n  getProjects = async (req, res) => {\n    try {\n      await Project.find()\n        .populate('tags')\n        .exec((err, data) => {\n          if (err) res.status(500).json({ error: err })\n          else {\n            res.send(data)\n          }\n        })\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n  filterProjects = async (req, res) => {\n    try {\n      const project = await Project.find({ released: req.query.released })\n      res.send(project)\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n  getProject = async (req, res) => {\n    try {\n      await Project.findById(req.params.project_id)\n        .populate('tags')\n        .exec((err, project) => {\n          if (err) res.status(500).json({ error: error.message })\n          else {\n            res.send(project)\n          }\n        })\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n\n  uploadProject = async (req, res) => {\n    try {\n      const images = this.Helpers.checkGif(res.locals.files)\n      const tags = await this.Helpers.checkTags(req.body.tags, Tag)\n      const project = new Project({\n        ...req.body.project,\n        images,\n        tags\n      })\n      await project.save()\n      res.send(project)\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n\n  updateProject = async (req, res) => {\n    try {\n      const images = req.files.length\n        ? this.Helpers.checkGif(res.locals.files)\n        : null\n      const projectBody = JSON.parse(req.body.project)\n      console.log(projectBody)\n      const project = await Project.findById(req.params.project_id)\n      await Project.updateOne(\n        { _id: req.params.project_id },\n        {\n          ...projectBody,\n          tags: await this.Helpers.checkTags(req.body.tags, Tag),\n          images: req.files.length ? images : project.images\n        }\n      )\n      res.send(project)\n    } catch (error) {\n      res.status(500).json({ error: error })\n      throw error\n    }\n  }\n  deleteProject = async (req, res, next) => {\n    try {\n      const project = await Project.findById(req.params.project_id)\n      const image = project.image_url.split('/')\n      res.locals.filename = image[image.length - 1]\n      res.locals.projectname = project.title\n      await project.remove()\n      next()\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n  getTags = async (req, res) => {\n    try {\n      const tags = await Tag.find()\n      res.send(tags)\n    } catch (error) {\n      res.status(500).json({ error: error.message })\n    }\n  }\n}\n\nexport { ProjectController }\n"],"file":"ProjectController.js"}